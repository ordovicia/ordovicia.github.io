<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 外部記憶</title>
    <link>/tags/c/</link>
    <description>Recent content in C on 外部記憶</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 03 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C&#43;&#43; - Python Interoperation</title>
      <link>/post/cpp_python_interop/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/cpp_python_interop/</guid>
      <description>

&lt;p&gt;C++とPythonを結ぶ方法について少し調べました。
コードは &lt;a href=&#34;https://github.com/ordovicia/cplusplus-ffi.git&#34;&gt;GitHub&lt;/a&gt; にあります。&lt;/p&gt;

&lt;h2 id=&#34;バージョン情報:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;バージョン情報&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OS X El Capitan (10.11.6)&lt;/li&gt;
&lt;li&gt;CMake 3.8.2&lt;/li&gt;
&lt;li&gt;g++ 7.1.0&lt;/li&gt;
&lt;li&gt;Python 3.6.1&lt;/li&gt;
&lt;li&gt;Boost 1.64.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;call-c-from-python:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;Call C++ from Python&lt;/h2&gt;

&lt;p&gt;主に二つの方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SWIG&lt;/li&gt;
&lt;li&gt;Boost.Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;swig:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;SWIG&lt;/h3&gt;

&lt;p&gt;SWIGは、C/C++プログラムを、他の言語で呼べるように変換してくれるツールです。
Pythonを対象にするときは、Pythonモジュールとして使える形のラッパーを自動で作ってくれるので、それを共有ライブラリにコンパイルして使います。
Python以外にも多くの言語に対応しています。&lt;/p&gt;

&lt;p&gt;詳細は、&lt;a href=&#34;http://www.swig.org/doc.html&#34;&gt;公式ドキュメント&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;以下のC++（実質C言語）プログラムを例に取ります。&lt;/p&gt;
// example.hpp

#pragma once

int fact(int n);
// example.cpp

#include &#34;example.hpp&#34;

int fact(int n)
{
    return n &lt;= 0 ? 1 : n * fact(n - 1);
}

&lt;p&gt;SWIGでは、「インターフェイスファイル」というものを作ります。
上のプログラムのインターフェイスファイルは次のようになります。&lt;/p&gt;
// example.i

%module example

%{

#define SWIG_FILE_WITH_INIT
#include &#34;example.hpp&#34;

%}

%include &#34;example.hpp&#34;

&lt;p&gt;基本的には、&lt;/p&gt;
%module module_name

%{
#define SWIG_FILE_WITH_INIT
#include module_header
%}

%include module_header

&lt;p&gt;と書きます。&lt;/p&gt;

&lt;p&gt;ビルドにはdistutilを使うのが一般的だと思いますが、ここではCMakeを使ってみます。
次のような &lt;code&gt;CMakeLists.txt&lt;/code&gt; を用意します。
ファイル名が変わってもそのまま使えるようになっています。&lt;/p&gt;
cmake_minimum_required(VERSION 3.8.0)

find_package(SWIG REQUIRED)
include(${SWIG_USE_FILE})

find_package(PythonLibs 3 REQUIRED)
include_directories(${PYTHON_INCLUDE_PATH})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

set(CMAKE_SWIG_FLAGS &#34;&#34;)

file(GLOB SWIG_FILES *.i)
file(GLOB SRC_FILES *.cpp)

set_source_files_properties(${SWIG_FILES} PROPERTIES CPLUSPLUS ON)
set_source_files_properties(${SWIG_FILES} PROPERTIES SWIG_FLAGS &#34;-includeall&#34;)

swig_add_library(example
    LANGUAGE python
    SOURCES ${SWIG_FILES} ${SRC_FILES})
swig_link_libraries(example ${PYTHON_LIBRARIES})

&lt;p&gt;（CMakeが3.8より古いと &lt;code&gt;swig_add_library&lt;/code&gt; ではなく &lt;code&gt;swig_add_module&lt;/code&gt; を使う必要があります。その際 &lt;code&gt;LANGUAGE&lt;/code&gt;, &lt;code&gt;SOURCES&lt;/code&gt; は除いてください。）&lt;/p&gt;

&lt;p&gt;あとは &lt;code&gt;cmake, make&lt;/code&gt; すれば &lt;code&gt;_example.so&lt;/code&gt; が生成され、Pythonからインポートして使えます。&lt;/p&gt;
import example

for i in range(10):
    print(example.fact(i))

&lt;h3 id=&#34;boost-python:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;Boost.Python&lt;/h3&gt;

&lt;p&gt;詳細は &lt;a href=&#34;http://www.boost.org/doc/libs/1_64_0/libs/python/doc/html/index.html&#34;&gt;公式ドキュメント&lt;/a&gt; を参照してください。
&lt;a href=&#34;https://github.com/TNG/boost-python-examples&#34;&gt;こちらの例&lt;/a&gt; も参考になります。&lt;/p&gt;

&lt;p&gt;なお、使ったことはないですが、Boost.Pythonのコードを自動で生成してくれる &lt;a href=&#34;http://pyplusplus.readthedocs.io/en/latest/&#34;&gt;Py++&lt;/a&gt; というのがあるようです。
また、Boost.Pythonのほかに &lt;a href=&#34;http://www.swig.org/&#34;&gt;SWIG&lt;/a&gt; も使えると思います。&lt;/p&gt;

&lt;p&gt;ちなみに、Boost.Python 1.64.0 からnumpyサポートがmaster入りしたようです。&lt;/p&gt;

&lt;h4 id=&#34;ビルド方法:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;ビルド方法&lt;/h4&gt;

&lt;p&gt;macOSでのPython3を対象とします。&lt;/p&gt;

&lt;p&gt;まず、Boost.PythonをHomebrewでインストールするのですが、Python3に対応させるために、&lt;code&gt;--with-python3&lt;/code&gt; オプションを付けます。&lt;/p&gt;
$ brew install boost-python --with-python3 --c++11

&lt;p&gt;GCCを使いたい場合は &lt;code&gt;--cc=gcc-7&lt;/code&gt; のようなオプションを追加してください。&lt;/p&gt;

&lt;p&gt;ビルドにはCMakeを使うことにします。
次のような&lt;code&gt;CMakeLists.txt&lt;/code&gt;を用意してください。
ここでは、&lt;code&gt;mod.cpp&lt;/code&gt; をPythonモジュールとしてビルドし、&lt;code&gt;test_mod.py&lt;/code&gt; から使います。&lt;/p&gt;
cmake_minimum_required(VERSION 3.8.0)

find_package(PythonInterp 3 REQUIRED)
find_package(PythonLibs 3 REQUIRED)
find_package(Boost COMPONENTS python3)

include_directories(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
link_libraries(${Boost_LIBRARIES} ${PYTHON_LIBRARIES})

python_add_module(mod mod.cpp)
file(COPY test_mod.py DESTINATION .)

&lt;p&gt;&lt;code&gt;cmake&lt;/code&gt; を実行すると &lt;code&gt;FindBoost.cmake&lt;/code&gt; がwarningを吐きますが、とりあえず気にしないでいいようです。&lt;/p&gt;

&lt;h4 id=&#34;c-の関数を公開する:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;C++の関数を公開する&lt;/h4&gt;

&lt;h5 id=&#34;基本:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;基本&lt;/h5&gt;

&lt;p&gt;例えば、次の関数 &lt;code&gt;mult2()&lt;/code&gt; をPythonから使えるようにしてみます。&lt;/p&gt;
// fn.cpp

int mult2(int x)
{
    return x * 2;
}

&lt;p&gt;次の記述を加えるだけで完了です。&lt;/p&gt;
#include &lt;boost/python.hpp&gt;

using namespace boost::python;

BOOST_PYTHON_MODULE(fn)
{
    def(&#34;mult2&#34;, mult2);
}

&lt;p&gt;&lt;code&gt;BOOST_PYTHON_MODULE&lt;/code&gt; マクロでPythonモジュールを作っています。
ここでは &lt;code&gt;fn&lt;/code&gt; モジュールと名付けました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;def()&lt;/code&gt; 関数に、関数名と関数ポインタを渡すだけです。
関数名はPython側で使いたいものなので好きに設定できます。&lt;/p&gt;

&lt;p&gt;Python側では次のように使えます。&lt;/p&gt;
import fn

for i in range(100):
    assert(fn.mult2(i) == i * 2)

&lt;h5 id=&#34;デフォルト引数:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;デフォルト引数&lt;/h5&gt;

&lt;p&gt;デフォルト引数を持つ、次の関数を考えます。&lt;/p&gt;
int sum(int x, int y = 0)
{
    return x + y;
}

&lt;p&gt;これを公開するには、&lt;code&gt;BOOST_PYTHON_FUNCTION_OVERLOADS&lt;/code&gt; マクロを使うのが便利です。
このマクロに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;生成されるクラス名（任意の名前）&lt;/li&gt;
&lt;li&gt;関数名&lt;/li&gt;
&lt;li&gt;引数の個数の最小・最大値&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を渡し、&lt;code&gt;def()&lt;/code&gt; を下の例のように呼びます。&lt;/p&gt;
BOOST_PYTHON_FUNCTION_OVERLOADS(sum_overloads, sum, 1, 2)

BOOST_PYTHON_MODULE(fn)
{
    def(&#34;sum&#34;, sum, sum_overloads());
}

&lt;p&gt;Python側で、デフォルト引数が使えていることが確認できます。&lt;/p&gt;
assert(fn.sum(2) == 2)
assert(fn.sum(2, 3) == 5)

&lt;h5 id=&#34;オーバーロード:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;オーバーロード&lt;/h5&gt;

&lt;p&gt;関数オーバーロードでも、&lt;code&gt;BOOST_PYTHON_FUNCTION_OVERLOADS&lt;/code&gt; マクロを使うのが便利です。
次の関数群 &lt;code&gt;sub()&lt;/code&gt; を考えます。&lt;/p&gt;
int sub(int x)
{
    return x;
}

int sub(int x, int y)
{
    return x - y;
}

&lt;p&gt;&lt;code&gt;BOOST_PYTHON_FUNCTION_OVERLOADS&lt;/code&gt; マクロを、デフォルト引数のときと同じように使います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;def()&lt;/code&gt; の記述は少し変わっています。
第二引数に、最も多くの引数をとる関数シグネチャを次のように書きます。&lt;/p&gt;
BOOST_PYTHON_FUNCTION_OVERLOADS(sub_overloads, sub, 1, 2)

BOOST_PYTHON_MODULE(fn)
{
    def(&#34;sub&#34;, (int (*)(int, int))0, sub_overloads());
}

&lt;h5 id=&#34;手動オーバーロード解決:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;手動オーバーロード解決&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;sub()&lt;/code&gt; の例では、すべての関数オーバーロードのシグネチャが、最も多くの引数をとる関数シグネチャに含まれるという形をとっていました。
これが成り立たないようなオーバーロードは、現時点では自動では扱えないため、手動でラッパーを書く必要があります。&lt;/p&gt;

&lt;p&gt;例えば、次の関数を加えたいとします。&lt;/p&gt;
double sub(double x)
{
    return x;
}

double sub(double x, double y)
{
    return x - y;
}

&lt;p&gt;これを &lt;code&gt;BOOST_PYTHON_FUNCTION_OVERLOADS&lt;/code&gt; で扱うことはできないため、次のように別名を付けてやります。&lt;/p&gt;
BOOST_PYTHON_MODULE(fn)
{
    double (*sub_double_1)(double) = sub;
    double (*sub_double_2)(double, double) = sub;

    def(&#34;sub&#34;, sub_double_1);
    def(&#34;sub&#34;, sub_double_2);
}

&lt;h5 id=&#34;キーワード引数:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;キーワード引数&lt;/h5&gt;

&lt;p&gt;C++の関数を、Python側でキーワード引数が使えるようにして公開することができます。
次の関数を例に取ります。&lt;/p&gt;
double my_div(double dividend, double divisor)
{
    return dividend / divisor;
}

&lt;p&gt;&lt;code&gt;BOOST_PYTHON_MODULE&lt;/code&gt; 内に以下のように記述すると、キーワード引数が使えるようになります。&lt;/p&gt;
    def(&#34;div&#34;, my_div, (arg(&#34;dividend&#34;), &#34;divisor&#34;));
assert(fn.div(3.0, 2.0) == 1.5)
assert(fn.div(dividend=3.0, divisor=2.0) == 1.5)
assert(fn.div(divisor=2.0, dividend=3.0) == 1.5)

&lt;p&gt;ちなみに、&lt;code&gt;arg(&amp;quot;dividend&amp;quot;) = 0&lt;/code&gt; のように書くとデフォルト引数になります。&lt;/p&gt;

&lt;h4 id=&#34;c-のクラスを公開する:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;C++のクラスを公開する&lt;/h4&gt;

&lt;h5 id=&#34;基本-1:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;基本&lt;/h5&gt;

&lt;p&gt;例えば、次の &lt;code&gt;Person&lt;/code&gt; クラスをPythonから使えるようにします。&lt;/p&gt;
// cls.cpp

#include &lt;string&gt;

struct Person {
public:
    explicit Person(std::string name) : name(name) {}
    const std::string name;

    std::string greet() const { return &#34;My name is &#34; + name; }
};

&lt;p&gt;関数のときと同じように、次の記述を加えて完了です。&lt;/p&gt;
#include &lt;boost/python.hpp&gt;
using namespace boost::python;

BOOST_PYTHON_MODULE(cls)
{
    class_&lt;Person&gt;(&#34;Person&#34;, init&lt;std::string&gt;())
        .def(&#34;greet&#34;, &amp;Person::greet);
}

&lt;p&gt;&lt;code&gt;class_&lt;/code&gt; 関数テンプレートを、公開するクラスを型引数、名前を引数にして呼び出します。
名前とともに &lt;code&gt;init&lt;/code&gt; を渡すと、それがコンストラクタになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;def()&lt;/code&gt; 関数をチェーン状につなげていくことでメンバ関数を定義できます。
ここでは &lt;code&gt;Person::greet()&lt;/code&gt; 関数を &lt;code&gt;greet&lt;/code&gt; という名前で公開しています。&lt;/p&gt;

&lt;p&gt;すると、Pythonからは次のように使うことができます。&lt;/p&gt;
import cls

p = cls.Person(&#34;pohe&#34;)
assert(p.greet() == &#34;My name is pohe&#34;)

&lt;h5 id=&#34;コンストラクタ:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;コンストラクタ&lt;/h5&gt;

&lt;p&gt;上述のようにコンストラクタを公開できましたが、オーバーロードするには、&lt;code&gt;def()&lt;/code&gt; に &lt;code&gt;init&lt;/code&gt; を渡していきます。&lt;/p&gt;
    ...

    explicit Person(std::string name, int age) : name(name), age(age) {}
    int age = 0;
    void grow() { age++; }

    ...

BOOST_PYTHON_MODULE(cls)
{
    class_&lt;Person&gt;(&#34;Person&#34;, init&lt;std::string&gt;())
        .def(init&lt;std::string, int&gt;())
        .def(&#34;greet&#34;, &amp;Person::greet);

&lt;p&gt;なお、コンストラクタを定義しない抽象クラスの場合は、&lt;code&gt;init&lt;/code&gt; の代わりに &lt;code&gt;no_init&lt;/code&gt; という変数を渡すようです。&lt;/p&gt;

&lt;h5 id=&#34;メンバ変数:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;メンバ変数&lt;/h5&gt;

&lt;p&gt;先程の例で &lt;code&gt;age&lt;/code&gt; メンバ変数（と &lt;code&gt;grow()&lt;/code&gt; メンバ関数）を追加しました。
メンバ変数は以下のように &lt;code&gt;def()&lt;/code&gt; チェーンにつなげていくことで公開できます。&lt;/p&gt;
        ...

        .def_readwrite(&#34;age&#34;, &amp;Person::age)
        .def(&#34;grow&#34;, &amp;Person::grow);

        ...

&lt;p&gt;&lt;code&gt;def_readwrite()&lt;/code&gt; を使うと、メンバ変数が読み込み・書き込みともに可能な状態でPythonから扱えるようになります。
&lt;code&gt;def_readonly()&lt;/code&gt; を使うと、読み込みのみ可能にできます。&lt;/p&gt;
p = cls.Person(&#34;fuga&#34;, 1)
assert(p.age == 1)
p.age = 10
assert(p.age == 10)
p.grow()
assert(p.age == 11)

&lt;h5 id=&#34;プロパティ:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;プロパティ&lt;/h5&gt;

&lt;p&gt;実際のC++では、メンバ変数はprivateにし、getter, setterを定義することが多いでしょう。&lt;/p&gt;

&lt;p&gt;上の例に &lt;code&gt;m_height&lt;/code&gt;, &lt;code&gt;m_weight&lt;/code&gt; メンバ変数を追加し、&lt;code&gt;m_height&lt;/code&gt; のgetterとsetter, &lt;code&gt;m_weight&lt;/code&gt; のgetterを定義します。&lt;/p&gt;
    ...

    int getHeight() const { return m_height; }
    void setHeight(int height) { m_height = height; }

    int getWeight() const { return m_weight; }

private:
    int m_height = 0;
    int m_weight = 50;
};

&lt;p&gt;Python側に公開するには、&lt;code&gt;add_property()&lt;/code&gt; 関数を &lt;code&gt;def()&lt;/code&gt; チェーンにつなげていきます。&lt;/p&gt;
        ...

        .add_property(&#34;height&#34;, &amp;Person::getHeight, &amp;Person::setHeight)
        .add_property(&#34;weight&#34;, &amp;Person::getWeight);

        ...

&lt;p&gt;&lt;code&gt;add_property()&lt;/code&gt; 関数に、プロパティ名、getter, setterを渡します。
setterを省略すると読み込み専用になります。&lt;/p&gt;
p.height = 150
assert(p.height == 150)

assert(p.weight == 50)
# p.weight = 100 # error

&lt;h5 id=&#34;オペレータ:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;オペレータ&lt;/h5&gt;

&lt;p&gt;C++でのクラスに対する、&lt;code&gt;opeartor+&lt;/code&gt; などのオペレータをPythonでも使えるようにします。
次の &lt;code&gt;Person::opeartor+=&lt;/code&gt; を例にします。&lt;/p&gt;
    Person&amp; operator+=(int age)
    {
        this-&gt;age += age;
        return *this;
    }

&lt;p&gt;これを公開するには、&lt;code&gt;def()&lt;/code&gt; チェーンに次を追加するだけです。&lt;/p&gt;
    ...

    .def(self += int())

    ...

&lt;p&gt;&lt;code&gt;self&lt;/code&gt; が &lt;code&gt;Person&lt;/code&gt;, &lt;code&gt;int()&lt;/code&gt; が &lt;code&gt;operator+=&lt;/code&gt; の引数に対応しています。
他のオペレータでも同様に書けます。&lt;/p&gt;

&lt;h5 id=&#34;特殊メソッド:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;特殊メソッド&lt;/h5&gt;

&lt;p&gt;Pythonにはいくつか特殊メソッドがあります。
ここでは、よく使う &lt;code&gt;__str__()&lt;/code&gt; のみ紹介します。&lt;/p&gt;

&lt;p&gt;C++から公開するクラスに &lt;code&gt;___str__()&lt;/code&gt; メソッドを定義したいとき、まずC++で &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; を定義します。
そして、&lt;code&gt;self_ns::str(self_ns::self)&lt;/code&gt; を&lt;code&gt;def()&lt;/code&gt; チェーンにわたします。&lt;/p&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Person p)
{
    os &lt;&lt; p.name;
    return os;
}

...

        .def(self_ns::str(self_ns::self))

        ...

&lt;p&gt;現時点での公式ドキュメントでは、&lt;code&gt;.def(str(self))&lt;/code&gt; のように &lt;code&gt;self_ns&lt;/code&gt; 名前空間の指定が書かれていませんが、これがないとコンパイルエラーになります。&lt;/p&gt;

&lt;p&gt;これによりPython側で &lt;code&gt;__str__()&lt;/code&gt; メソッドが定義され、&lt;code&gt;print()&lt;/code&gt; で好きな文字列を表示したりできます。&lt;/p&gt;

&lt;h5 id=&#34;イテレータ:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;イテレータ&lt;/h5&gt;

&lt;p&gt;C++でのクラスに、Pythonで使えるイテレータを定義することができます。
あまりいい例ではないですが、&lt;code&gt;Person::name&lt;/code&gt; を一文字ずつ走査するイテレータを考えます。&lt;/p&gt;

&lt;p&gt;Person&lt;code&gt;クラスにイテレータの最初と最後を返すメンバ関数を定義し、&lt;/code&gt;def()` チェーンに次のように渡します。&lt;/p&gt;
    ...

    auto begin() { return name.begin(); }
    auto end() { return name.end(); }

    ...

        .def(&#34;__iter__&#34;, range(&amp;Person::begin, &amp;Person::end));

&lt;p&gt;&lt;code&gt;range()&lt;/code&gt; にイテレータの最初と最後を渡しています。
&lt;code&gt;__iter__&lt;/code&gt; という名前にすることで、Pythonでのfor文に &lt;code&gt;Person&lt;/code&gt; 型が渡せるようになっていますが、
別の名前にすれば、その名前のメソッドがイテレータを返すようになります。&lt;/p&gt;
for s in p:
    print(s)

&lt;p&gt;ちなみに、&lt;code&gt;vector&lt;/code&gt; など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterator&lt;/code&gt; typedef&lt;/li&gt;
&lt;li&gt;&lt;code&gt;begin()&lt;/code&gt; メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end()&lt;/code&gt; メンバ関数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をもつクラスについては、&lt;code&gt;range()&lt;/code&gt; の代わりに &lt;code&gt;iterator&amp;lt;Person&amp;gt;()&lt;/code&gt; を渡すこともできるようです。&lt;/p&gt;

&lt;h4 id=&#34;紹介しなかったもの:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;紹介しなかったもの&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;型変換&lt;/li&gt;
&lt;li&gt;関数呼び出しポリシー&lt;/li&gt;
&lt;li&gt;継承、仮想関数&lt;/li&gt;
&lt;li&gt;C++からPythonへの例外の変換&lt;/li&gt;
&lt;li&gt;docstring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;紹介しなかったものや、詳細は &lt;a href=&#34;http://www.boost.org/doc/libs/1_64_0/libs/python/doc/html/tutorial/tutorial/exposing.html&#34;&gt;公式ドキュメント&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h2 id=&#34;call-python-from-c:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;Call Python from C++&lt;/h2&gt;

&lt;p&gt;これもBoost.Pythonを使います。&lt;/p&gt;

&lt;p&gt;もともと、PythonのC APIを使ってC/C++からPythonを呼ぶことは（あまり複雑なコードでなければ）難しくなかったため、
Boost.Pythonも今のところ簡単なラッパーを提供するにとどまっています。&lt;/p&gt;

&lt;p&gt;PythonのC APIを使う方法で面倒だったのがPythonオブジェクトの参照カウンタの扱いで、
Boost.Pythonがこれを引き受けてくれるのが助かります。&lt;/p&gt;

&lt;h3 id=&#34;準備:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;準備&lt;/h3&gt;

&lt;p&gt;C++側で &lt;code&gt;boost/python.hpp&lt;/code&gt; をインクルードし、&lt;code&gt;Py_Initialize()&lt;/code&gt; を呼んで初期化します。&lt;/p&gt;
#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

int main()
{
    using namespace std;
    namespace bp = boost::python;

    try {
        Py_Initialize();

&lt;h3 id=&#34;モジュールの読み込みと操作:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;モジュールの読み込みと操作&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;import()&lt;/code&gt; 関数にPythonモジュール名を渡すと、そのモジュールが読み込まれます。
&lt;code&gt;__main__&lt;/code&gt; にすれば、白紙状態のメインモジュールになります。
モジュールをはじめ、Boost.PythonでのPythonオブジェクトの型は &lt;code&gt;object&lt;/code&gt; になっています。&lt;/p&gt;

&lt;p&gt;モジュールの &lt;code&gt;__dict__&lt;/code&gt; 属性を辞書として参照することで、そのモジュールの名前空間が得られます。
Boost.Pythonの &lt;code&gt;extract()&lt;/code&gt; 関数テンプレートは、PythonオブジェクトからC++側で使うある値を取り出すときに使います。&lt;/p&gt;
        bp::object py_main_module = bp::import(&#34;__main__&#34;);
        bp::dict py_main_namespace
            = bp::extract&lt;bp::dict&gt;(py_main_module.attr(&#34;__dict__&#34;));

&lt;p&gt;ちなみに、&lt;code&gt;__main__&lt;/code&gt; 以外のモジュールは、相対パスの場合 &lt;code&gt;PYTHONPATH&lt;/code&gt; 環境変数からのパスが使われるので、&lt;code&gt;setenv()&lt;/code&gt; などでの設定が必要です。&lt;/p&gt;

&lt;p&gt;名前空間（実体は辞書）に、C++側で値の追加・変更ができます。
辞書なので名前をキーとして &lt;code&gt;[]&lt;/code&gt; でアクセスして代入するだけです。&lt;/p&gt;
        py_main_namespace[&#34;p&#34;] = &#34;po&#34;;

&lt;p&gt;PythonオブジェクトからC++での値を取り出すには、先述した &lt;code&gt;extract()&lt;/code&gt; 関数テンプレートを使います。
テンプレート引数にC++での型を指定します。&lt;/p&gt;

&lt;p&gt;ここで注意なのが、文字列(&lt;code&gt;std::string&lt;/code&gt;)を取り出す際、&lt;code&gt;auto&lt;/code&gt; で受けると他の型になってしまうので、戻り値の型を明示的に &lt;code&gt;std::string&lt;/code&gt; に指定します。
&lt;code&gt;int&lt;/code&gt; や &lt;code&gt;double&lt;/code&gt; などプリミティブな型は &lt;code&gt;auto&lt;/code&gt; で大丈夫なようです。&lt;/p&gt;
        std::string p = bp::extract&lt;std::string&gt;(py_main_namespace[&#34;p&#34;]);
        cout &lt;&lt; &#34;Defined &#39;p = \&#34;po\&#34;&#39;\n&#34;
             &lt;&lt; &#34;(C++) p = \&#34;&#34; &lt;&lt; p &lt;&lt; &#34;\&#34;\n&#34; &lt;&lt; endl;

&lt;h3 id=&#34;pythonの呼び出し:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;Pythonの呼び出し&lt;/h3&gt;

&lt;p&gt;さて、C++からPythonを呼び出してみましょう。
まずは、式を文字列で渡してPythonインタプリタで評価してみます。&lt;/p&gt;
        bp::object py_s2 = bp::eval(&#34;p + p&#34;, py_main_namespace);
        p = bp::extract&lt;std::string&gt;(py_main_namespace[&#34;p&#34;]);
        std::string pp = bp::extract&lt;std::string&gt;(py_s2);
        cout &lt;&lt; &#34;Evaluated &#39;p + p&#39;; resulting in &#39;pp&#39;\n&#34;
             &lt;&lt; &#34;(C++) p = \&#34;&#34; &lt;&lt; p &lt;&lt; &#34;\&#34;\n&#34;
             &lt;&lt; &#34;(C++) pp = \&#34;&#34; &lt;&lt; pp &lt;&lt; &#34;\&#34;\n&#34; &lt;&lt; endl;

&lt;p&gt;&lt;code&gt;eval()&lt;/code&gt; 関数にPythonの式を渡すと、評価結果がPythonオブジェクト（&lt;code&gt;boost::python::object&lt;/code&gt;）で返ってきます。
&lt;code&gt;eval()&lt;/code&gt; 関数の引数は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一引数

&lt;ul&gt;
&lt;li&gt;評価する式を文字列で&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第二引数

&lt;ul&gt;
&lt;li&gt;評価する際のローカルな名前空間（辞書）&lt;/li&gt;
&lt;li&gt;省略すると空の辞書&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第三引数

&lt;ul&gt;
&lt;li&gt;評価する際のグローバルな名前空間（辞書）&lt;/li&gt;
&lt;li&gt;省略すると空の辞書&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という仕様です。&lt;/p&gt;

&lt;p&gt;次に、文を実行してみます。
これには &lt;code&gt;exec()&lt;/code&gt; 関数を使います。&lt;/p&gt;
        bp::exec(R&#34;(
def f():
    global p
    p = p + p
    return p

f()
)&#34;,
            py_main_namespace);
        p = bp::extract&lt;std::string&gt;(py_main_namespace[&#34;p&#34;]);
        cout &lt;&lt; &#34;Executed &#39;p = p + p&#39;\n&#34;
             &lt;&lt; &#34;(C++) p = \&#34;&#34; &lt;&lt; p &lt;&lt; &#34;\&#34;\n&#34; &lt;&lt; endl;

&lt;p&gt;&lt;code&gt;exec()&lt;/code&gt; にPythonの文を渡すと、Pythonインタプリタで実行されます。
第二、第三引数の仕様は &lt;code&gt;eval()&lt;/code&gt; と同様です
（&lt;code&gt;exec()&lt;/code&gt; もPythonオブジェクトを返すのですが、文の実行結果なので &lt;code&gt;None&lt;/code&gt; であり、これを使うことはないと思います）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;py_main_namespace[&amp;quot;p&amp;quot;]&lt;/code&gt; が更新されていることが確認できます。&lt;/p&gt;

&lt;p&gt;最後に、Pythonスクリプトファイルを読み込んで実行します。
今回は、次のファイルを使います。&lt;/p&gt;
ppp = &#34;po &#34; + p
print(&#34;(Python) ppp = &#34; + ppp)

&lt;p&gt;&lt;code&gt;exec_file()&lt;/code&gt; にファイル名（相対パスの場合、実行している場所から）を渡すと、それが読み込まれて実行されます。
第二、第三引数の仕様は &lt;code&gt;exec()&lt;/code&gt; などと同様です。&lt;/p&gt;
        cout &lt;&lt; &#34;Executing &#39;embedding.py&#39;&#34; &lt;&lt; endl;
        bp::exec_file(&#34;embedding.py&#34;, py_main_namespace);
        std::string ppp = bp::extract&lt;std::string&gt;(py_main_namespace[&#34;ppp&#34;]);
        cout &lt;&lt; &#34;(C++) ppp = \&#34;&#34; &lt;&lt; ppp &lt;&lt; &#34;\&#34;\n&#34; &lt;&lt; endl;

&lt;p&gt;ファイルが存在しない場合、&lt;code&gt;std::invalid_argument&lt;/code&gt; 例外が投げられます。&lt;/p&gt;

&lt;h3 id=&#34;pythonの例外:6dbaf25571c59f18af2335417ebb6a82&#34;&gt;Pythonの例外&lt;/h3&gt;

&lt;p&gt;Pythonインタプリタの実行時に例外が発生すると、Boost.Pythonは &lt;code&gt;error_already_set&lt;/code&gt; 例外を投げます。
それ以降の例外処理は実装されていないらしく、&lt;a href=&#34;https://docs.python.org/3/c-api/exceptions.html&#34;&gt;PythonのC API&lt;/a&gt; に従って処理する必要があるようです。
例えば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PyErr_ExceptionMatches()&lt;/code&gt; 関数で例外の種類を特定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyErr_Print()&lt;/code&gt; 関数で例外の内容を表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったAPIがあります。&lt;/p&gt;
    } catch (const bp::error_already_set&amp; e) {
        if (PyErr_ExceptionMatches(PyExc_ZeroDivisionError)) {
            cerr &lt;&lt; &#34;(C++) ZeroDivisionError&#34; &lt;&lt; endl;
        }
        PyErr_Print();
        return 1;
    }

    return 0;
}
</description>
    </item>
    
  </channel>
</rss>